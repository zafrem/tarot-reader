name: publish-testpypi

on:
  workflow_dispatch:
  push:
    tags: ["v*"]   # v0.0.1

jobs:
  build-and-upload:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Clean old metadata and caches
        run: |
          echo "🧹 Cleaning metadata and old build artifacts..."
          git clean -xfd             # .gitignore에 포함된 파일 포함 전체 정리
          rm -rf dist build *.egg-info
          find . -type d -name "*.egg-info" -exec rm -rf {} +
          rm -rf ~/.cache/pip ~/.cache/build

      - name: Upgrade build toolchain
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade setuptools wheel build twine

      - name: Sanity check for legacy license key
        run: |
          set -e
          echo "🔍 Scanning for legacy 'license-file' keys..."
          FOUND=$(grep -RNI --include="*.*" -e 'license-file' -e 'license_file' . | grep -v 'pyproject.toml' || true)
          if [ -n "$FOUND" ]; then
            echo "::error::Found legacy key usage:"
            echo "$FOUND"
            exit 1
          fi

      - name: Build fresh distributions
        run: python -m build

      - name: Dump METADATA and PKG-INFO
        run: |
          python - <<'PY'
          import glob, zipfile, tarfile
          for f in glob.glob("dist/*.whl"):
              print("=== WHEEL:", f)
              with zipfile.ZipFile(f) as z:
                  meta = [n for n in z.namelist() if n.endswith("METADATA")][0]
                  print(z.read(meta).decode())
          for f in glob.glob("dist/*.tar.gz"):
              print("=== SDIST:", f)
              with tarfile.open(f, "r:gz") as t:
                  pkgi = [m for m in t.getmembers() if m.name.endswith("PKG-INFO")][0]
                  print(t.extractfile(pkgi).read().decode())
          PY

      - name: Validate metadata
        run: twine check dist/*

      - name: Upload to TestPyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: twine upload --repository-url https://test.pypi.org/legacy/ dist/*
